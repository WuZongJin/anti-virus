#include<iostream>
#include<stdlib.h>

using namespace std;

int pNum = 1;

typedef struct
{
	int XiShu;
	int ZhiShu;
}ELemType;

typedef struct NODE
{
	ELemType data;
	struct NODE *pNext;
}NODE;

struct NODE *create();
void show(NODE *head);
void pfree(NODE *head);

struct NODE *create() {
	NODE *head, *p1, *p2;
	ELemType temp;
	int num;

	head = (NODE *)malloc(sizeof(NODE)); 
	
	head = NULL;  
	p1 = (NODE*)malloc(sizeof(NODE));
	p2 = (NODE*)malloc(sizeof(NODE));
	cout << "一元多项式有多少项：";
	cin >> num;
	for (int i = 0; i < num; i++)
	{
		
		cout << "第" << i + 1 << "项的系数为：";
		cin >> temp.XiShu;
		cout << "第" << i + 1 << "项的指数为：";
		cin >> temp.ZhiShu;
		p1 -> data = temp;
		if(head==NULL)
			head = p1;
		else
			p2->pNext = p1;
		p2 = p1;
		p1= (NODE*)malloc(sizeof(NODE));
		p1->pNext = NULL;
	}
	return head;  
}

void show(NODE *head)
{
	NODE *p;
	p = head;
	ELemType temp;
	if (head != NULL)
	{
		cout << "第" << pNum <<"个一元多项式为：";		
		temp = p->data;
		cout << temp.XiShu << "x^" << temp.ZhiShu ;
		p = p->pNext;
		while (p != NULL)
		{
			temp = p->data;
			cout <<  "+" <<temp.XiShu << "x^" << temp.ZhiShu;
			p = p->pNext;
		}
		cout << endl;
		pNum += 1;
	}
}

void show_result(NODE *head)
{
	NODE *p;
	p = head;
	ELemType temp;
	if (head != NULL)
	{
		cout << "两个一元多项式的和为：";
		temp = p->data;
		cout << temp.XiShu << "x^" << temp.ZhiShu;
		p = p->pNext;
		while (p != NULL)
		{
			temp = p->data;
			cout << "+" << temp.XiShu << "x^" << temp.ZhiShu;
			p = p->pNext;
		}
		cout << endl;
		pNum += 1;
	}
}

void pfree(NODE *head)
{
	NODE *p1, *p2;
	p1 = head;
	while (p1->pNext != NULL)
	{
		p2 = p1->pNext;
		p1->pNext = p2->pNext;
		free(p2);
	}
}

struct NODE *poly_rank(NODE *head)
{
	NODE *p1, *p2;
	ELemType temp1, temp2;

	for (p1 = head->pNext; p1 != NULL; p1 = p1->pNext)
	{
		for (p2 = head; p2 != p1; p2 = p2->pNext)
		{
			temp1 = p1->data;
			temp2 = p2->data;
			if (temp1.ZhiShu < temp2.ZhiShu)
			{
				p2->data = temp1;
				p1->data = temp2;
			}
		}
	}
	return head;
	

}

struct NODE *poly_add(NODE *poly1, NODE *poly2,NODE *add)
{
	ELemType temp1, temp2;
	while (poly1||poly2)
	{
		if (poly1&&poly2)
		{
			temp1 = poly1->data;
			temp2 = poly2->data;
			if (temp1.ZhiShu < temp2.ZhiShu)
			{
				add->data = temp1;
				poly1 = poly1->pNext;
			}
			else if (temp1.ZhiShu > temp2.ZhiShu)
			{
				add->data = temp2;
				poly2 = poly2->pNext;
			}
			else if (temp1.ZhiShu == temp2.ZhiShu)
			{
				temp1.XiShu += temp2.XiShu;
				add->data = temp1;
				poly1 = poly1->pNext;
				poly2 = poly2->pNext;
			}
		}
		else if (poly1 == NULL)
		{
			temp2 = poly2->data;
			add->data = temp2;
			poly2 = poly2->pNext;
		}
		else if (poly2 == NULL)
		{
			temp1 = poly1->data;
			add->data = temp1;
			poly1 = poly1->pNext;
		}
		if (poly1||poly2)
		{
			add->pNext = (NODE *)malloc(sizeof(NODE));
			add = add->pNext;
		}
	}
	add->pNext = NULL;

	return add;
}

int main()
{
	struct NODE *poly1, *poly2;
	struct NODE *add;
	add = (NODE *)malloc(sizeof(NODE));
	poly1 = create();
	poly2 = create();
	show(poly1);
	show(poly2);
	poly_rank(poly1);
	poly_rank(poly2);
	poly_add(poly1, poly2, add);
	show_result(add);
	pfree(poly1);
	pfree(poly2);
	pfree(add);
	return 0;

}



